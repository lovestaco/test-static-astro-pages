---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CreditsButton from '../../components/buttons/CreditsButton';
import ToolContainer from '../../components/tool/ToolContainer';
import ToolHead from '../../components/tool/ToolHead';
import { getCollection } from 'astro:content';
import AdBanner from '../../components/banner/AdBanner.astro';

export async function getStaticPaths() {
  const svgIconsEntries = await getCollection('svgIconsMetadata');
  const iconsData = svgIconsEntries[0]?.data;

  if (!iconsData) {
    throw new Error('SVG icons metadata not found');
  }

  const categories = Object.values(iconsData.clusters).map((cluster: any) => cluster.name);
  
  return categories.map(category => ({
    params: { category },
    props: { category }
  }));
}

const { category } = Astro.params;

async function getCategoryIcons() {
  const svgIconsEntries = await getCollection('svgIconsMetadata');
  const iconsData = svgIconsEntries[0]?.data;

  if (!iconsData) {
    return [];
  }

  // Find the cluster by name
  const cluster = Object.values(iconsData.clusters).find((c: any) => c.name === category) as any;
  if (!cluster) {
    return [];
  }
  
  const icons = [];

  // Process each file object in the cluster - NO SVG loading at build time
  for (const fileObj of cluster.fileNames) {
    const iconName = typeof fileObj === 'string' 
      ? fileObj.replace('.svg', '') 
      : fileObj.fileName?.replace('.svg', '') || '';

    icons.push({
      name: iconName,
      description: typeof fileObj === 'object' ? fileObj.description || `Free ${iconName} icon` : `Free ${iconName} icon`,
      category: category,
      tags: typeof fileObj === 'object' ? fileObj.tags || cluster.keywords || [] : cluster.keywords || [],
      author: typeof fileObj === 'object' ? fileObj.author || 'Free DevTools' : 'Free DevTools',
      license: typeof fileObj === 'object' ? fileObj.license || 'MIT' : 'MIT',
      url: `/freedevtools/svg_icons/${category}/${iconName}/`
    });
  }

  return icons;
}

const categoryIcons = await getCategoryIcons();
const totalIcons = categoryIcons.length;

const categoryIconMap = {
  "general": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "animals": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "nature": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "technology": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "business": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "social": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "shapes": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
};

const categoryIcon = categoryIconMap[category as keyof typeof categoryIconMap] || categoryIconMap.general;

// Breadcrumb data
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'SVG Icons', href: '/freedevtools/svg_icons/' },
  { label: category }
];
---

<BaseLayout 
  name={`${category} SVG Icons`}
  path={`/freedevtools/svg_icons/${category}`}
  title={`${category} SVG Icons - Free Download & Edit | Online Free DevTools by Hexmos`}
  description={`Download free ${category} SVG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. ${totalIcons} icons available.`}
  canonical={`https://hexmos.com/freedevtools/svg_icons/${category}/`}
  
  
  showHeader={true}
  totalItems={totalIcons}
  category={category}
  partOf="SVG Icons"
  partOfUrl="https://hexmos.com/freedevtools/svg_icons/"
  keywords={[category, "svg icons", "vector graphics", "free icons"]}
>

  
  <ToolContainer>
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <ToolHead
      name={`${category} SVG Icons`}
      description={`Discover ${totalIcons} scalable ${category} icons ready in vector SVG format`}
      breadcrumbItems={breadcrumbItems}
    />
<div class="min-h-[200px]">
    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-6 mb-8 mt-3">
      {categoryIcons.map((icon) => {
        const iconName = icon.name.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
        
        return (
          <a
            href={icon.url}
            class="bg-white rounded-lg p-4 cursor-pointer hover:bg-slate-100 border border-white hover:border-slate-300 transition-all duration-200 shadow-sm hover:shadow-md"
            title={iconName}
          >
            <div class="flex flex-col items-center text-center">
              <div class="w-24 h-24 flex items-center justify-center">
                <div class="w-24 h-24 text-slate-600" style="display: flex; align-items: center; justify-content: center; overflow: hidden;">
                  <img 
                    src={`/freedevtools/svg_icons/${icon.category}/${icon.name}.svg`}
                    alt={`${iconName} icon`}
                    class="w-20 h-20 object-contain"
                    loading="lazy"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                  />
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-slate-400" style="display:none;">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                </div>
              </div>
            </div>
          </a>
        );
      })}
    </div>
  </div>
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/svg_icons/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to SVG Icons
        </a>
        <CreditsButton href="/freedevtools/svg_icons/credits/" />
      </div>
    </div>
  </ToolContainer>
</BaseLayout>

<style>
  .icon-preview svg {
    width: 100% !important;
    height: 100% !important;
    max-width: 104px;
    max-height: 104px;
    display: block;
    object-fit: contain;
  }
</style>

