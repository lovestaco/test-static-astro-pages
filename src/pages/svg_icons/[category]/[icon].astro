---
import AdBanner from '../../../components/banner/AdBanner.astro';
import CopyPngButton from '../../../components/buttons/CopyPngButton.tsx';
import CopySvgButton from '../../../components/buttons/CopySvgButton.tsx';
import CreditsButton from '../../../components/buttons/CreditsButton';
import DownloadPngButton from '../../../components/buttons/DownloadPngButton.tsx';
import DownloadSvgButton from '../../../components/buttons/DownloadSvgButton.tsx';
import ToastProvider from '../../../components/ToastProvider';
import ToolContainer from '../../../components/tool/ToolContainer';
import ToolHead from '../../../components/tool/ToolHead';
import BaseLayout from '../../../layouts/BaseLayout.astro';
// SVG processing moved to client-side for better performance


export async function getStaticPaths() {
  const { getCollection } = await import('astro:content');
  
  const svgIconsEntries = await getCollection('svgIconsMetadata');
  const iconsData = svgIconsEntries[0]?.data;

  if (!iconsData) {
    throw new Error('SVG icons metadata not found');
  }

  const paths = [];
  
  // Process each cluster (category) - NO SVG loading at build time
  for (const [clusterKey, clusterData] of Object.entries(iconsData.clusters)) {
    const cluster = clusterData as any;
    const categoryName = cluster.name; // Use the name from the cluster data
    
    // Process each file object in the cluster - NO SVG loading at build time
    for (const fileObj of cluster.fileNames) {
      const iconName = typeof fileObj === 'string' 
        ? fileObj.replace('.svg', '') 
        : fileObj.fileName?.replace('.svg', '') || '';
      
      paths.push({
        params: { category: categoryName, icon: iconName },
        props: {
          iconData: {
            name: iconName,
            description: typeof fileObj === 'object' ? fileObj.description || `Free ${iconName} icon` : `Free ${iconName} icon`,
            category: categoryName,
            tags: typeof fileObj === 'object' ? fileObj.tags || cluster.keywords || [] : cluster.keywords || [],
            author: typeof fileObj === 'object' ? fileObj.author || 'Free DevTools by Hexmos' : 'Free DevTools by Hexmos',
            license: typeof fileObj === 'object' ? fileObj.license || 'MIT' : 'MIT',
            usecases: typeof fileObj === 'object' ? fileObj.usecases || '' : '',
            synonyms: typeof fileObj === 'object' ? fileObj.synonyms || [] : [],
            industry: typeof fileObj === 'object' ? fileObj.industry || '' : '',
            emotional_cues: typeof fileObj === 'object' ? fileObj.emotional_cues || '' : ''
          }
        }
      });
    }
  }
  
  return paths;
}


const { category, icon } = Astro.params;
const { iconData } = Astro.props as {
  iconData: {
    name: string;
    category: string;
    svgContent: string;
    originalSvgContent: string;
    tags: string[];
    author: string;
    license: string;
    description: string;
    usecases: string;
    synonyms: string[];
    industry: string;
    emotional_cues: string;
  };
};

// Breadcrumb data
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'SVG Icons', href: '/freedevtools/svg_icons/' },
  { label: category, href: `/freedevtools/svg_icons/${category}/` },
  { label: iconData.name }
];


// Generate SEO-friendly title and description
const seoTitle = `Free ${iconData.name} SVG Icon Download | Online Free DevTools by Hexmos`;
const seoDescription = `Download ${iconData.name} SVG icon for free. High-quality vector icon in ${iconData.category} category. No registration required. Unlimited Downloads.`;


// Generate better alt text for the icon
const altText = `${iconData.name} ${iconData.category} icon - Free SVG download`;


const canonical = `https://hexmos.com/freedevtools/svg_icons/${category}/${icon}/`;


// Static SVG dimensions for structured data
const svgDimensions = { width: 128, height: 128, viewBox: "0 0 128 128", aspectRatio: 1 };


// Generate thumbnail URL (points to the actual SVG image in public folder)
// For brand-oauth icon, use PNG thumbnail for better Google search preview
const thumbnailUrl = icon === 'brand-oauth' && category === 'factory' 
  ? `https://hexmos.com/freedevtools/emoji_data/abacus/abacus_3d.png`
  : `https://hexmos.com/freedevtools/svg_icons/${category}/${icon}.svg`;


// Set encoding format based on the same condition
const encodingFormat = icon === 'brand-oauth' && category === 'factory' 
  ? "image/png"
  : "image/svg+xml";
 
---

<BaseLayout 
  name={iconData.name}
  path={`/freedevtools/svg_icons/${category}/${icon}/`}
  title={seoTitle}
  description={seoDescription}
  canonical={canonical}
  
  imgWidth={svgDimensions.width}
  imgHeight={svgDimensions.height}
  thumbnailUrl={thumbnailUrl}
  ogImage={thumbnailUrl}
  twitterImage={thumbnailUrl}
  
  showHeader={true}
  encodingFormat={encodingFormat}
  partOf={`${iconData.category} Icons`}
  partOfUrl={`https://hexmos.com/freedevtools/svg_icons/${category}/`}
  keywords={iconData.tags}
  features={iconData.tags}
  category={iconData.category}
  iconName={iconData.name}
  iconCategory={iconData.category}
  iconTags={iconData.tags}
  author={iconData.author}
  license={iconData.license}
>
<ToastProvider client:load>
  <ToolContainer>
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <ToolHead
      name={`${iconData.name} Vector SVG Icon`}
      description={seoDescription}
      breadcrumbItems={breadcrumbItems}
    />
   

    {/* Main Section: Icon + Buttons (left) + Metadata (right) */}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-10 mt-6">

      {/* Left Block: Icon + Buttons */}
      <div class="flex flex-col items-start space-y-4">

      {/* Icon Canvas (Wider + Taller) */}
      <div class="flex items-center justify-center bg-gray-100 rounded-xl p-4 shadow-md w-full max-w-md h-[400px]">
        <picture>
          <source type="image/svg+xml" srcset={`/freedevtools/svg_icons/${category}/${icon}.svg`} />
          <img
            src={`/freedevtools/svg_icons/${category}/${icon}.svg`}
            alt={altText}
            width="280"
            height="280"
            style={{
              maxWidth: "100%",
              objectFit: "contain",
              display: "block"
            }}
            loading="eager"
            decoding="async"
            title={`${iconData.name} ${iconData.category} icon`}
            fetchpriority="high"
          />
        </picture>
      </div>


        {/* Copy & Download Buttons */}
        <div class="grid grid-cols-2 gap-2 w-full max-w-md">
          <CopySvgButton iconData={iconData} client:load />
          <CopyPngButton iconData={iconData} client:load />
          <DownloadSvgButton iconData={iconData} client:load />
          <DownloadPngButton iconData={iconData} client:load />
        </div>

      </div>

      {/* Right Block: Metadata */}
      <div class="flex flex-col justify-start space-y-6">

        <p class="leading-relaxed">
          {iconData.description}
        </p>

        {/* Sections */}
        {[
          { title: "Practical Applications", content: iconData.usecases },
          { 
            title: "Alternative Terms", 
            content: iconData.synonyms.length ? (
              <div class="flex flex-wrap gap-2">
                {iconData.synonyms.map((synonym) => (
                  <span class="inline-block bg-gray-200 dark:bg-slate-700 text-sm text-slate-800 dark:text-slate-200 px-2 py-1 rounded-full select-none">
                    {synonym}
                  </span>
                ))}
              </div>
            ) : "No synonyms available." 
          },
          { title: "Business Domains", content: iconData.industry },
          { title: "Psychological Impact", content: iconData.emotional_cues }
        ].map((section) => (
          <div>
            <h2 class="text-lg font-semibold mb-2 text-black dark:text-slate-300">{section.title}</h2>
            <p class="leading-relaxed">{section.content}</p>
          </div>
        ))}

        {/* Tags */}
        <div>
          <h2 class="text-xl font-semibold mb-3 text-black dark:text-slate-300">Tags</h2>
          {iconData.tags.length > 0 ? (
            <div class="flex flex-wrap gap-2">
              {iconData.tags.map((tag) => (
                <p class="inline-block bg-blue-100 text-blue-800 rounded-full px-3 py-1 select-none cursor-default dark:bg-blue-800 dark:text-blue-100">
                  {tag}
                </p>
              ))}
            </div>
          ) : (
            <p class="leading-relaxed">No tags available.</p>
          )}
        </div>
      </div>
    </div>

    {/* Footer / Navigation */}
    <div class="mt-12 pt-6 border-t border-slate-200 dark:border-slate-700 flex flex-wrap gap-4">
      <a 
        href="/freedevtools/svg_icons/" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
      >
        ‚Üê Back to SVG Icons
      </a>
      <CreditsButton href="/freedevtools/svg_icons/credits/" />
    </div>
  </ToolContainer>
</ToastProvider>




</BaseLayout>


<style>
  /* Simple SVG styling */
  .icon-display-container svg {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
  }
</style>
